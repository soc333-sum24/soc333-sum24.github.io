{
  "hash": "e4b0bdea7b03a683c7496bbd70037cbf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hypothesis tests pt 3\"\nsubtitle: \"Lecture 15\"\ndate: \"June 11, 2024\"\nformat: revealjs\nsmaller: true\n---\n\n\n\n\n## Logistics {.smaller}\n\n-   Project component 3, results: draft by Thursday (June 13), submit for grading next Monday (June 17)\n\n    -   Drafts should be complete--meaning you attempted all parts\n    -   Instructions are posted\n\n## Today {.smaller}\n\n-   Selecting the correct hypothesis test\n-   Running hypothesis tests in `infer`\n\n## Different types of tests\n\n::: incremental\n-   To figure out what test you need, you need to know some things about your variables:\n\n    -   What is/are your explanatory variable(s)? What type of variable is it/are they (categorical with two levels, categorical with three levels, or numeric)? How many explanatory variables are there?\n    -   What is your response variable? What type of variable is it?\n:::\n\n## A recap on variables\n\n-   They never go away! Identifying what kind of variables you have and what role they're playing in your analysis is really central. Here's a summary of the distinctions that are relevant here.\n\n## A recap on variables: types\n\n::: incremental\n-   Numeric. The responses are numbers\n\n    -   Income, height, age\n\n-   Categorical with two categories: The response options are categories--represented with words, not (meaningful) numeric values. There are only two response options available. This includes binary variables.\n\n    -   Sex assigned at birth (male/female), married or not, hired or not\n\n-   Categorical with three or more categories: The response options are categories, like above, but there are more than two possibilities.\n\n    -   Race, smoking status (never, current, former), music genre preference\n:::\n\n## A recap on variables: roles in your analysis\n\n::: incremental\n-   Explanatory/independent: The thing doing the explaining; the thing that comes first\n-   Response/dependent: The outcome that is being predicted; the thing that comes second, possibly as a result of the explanatory variable.\n:::\n\n## A recap on variables\n\n-   Example: How does whether a student attends a public or private high school affect their probability of graduating?\n\n::: incremental\n-   What are the explanatory and response variables? What are their types?\n\n    -   Explanatory: Type of high school (public or private): categorical with two categories\n\n    -   Response: Graduated or not: categorical with two categories\n\n        -   Why not *probability* of graduating? Because we can't observe that for any individual person. We observe whether each one graduated or not. Then we use that to calculate probabilities for the two groups in the sample: those at private high schools and those at public high schools.\n:::\n\n## Identifying the right test: exercise Q1\n\n-   This one is in R---find the **ex-6-11-yourusername** repo on GitHub and clone it\n\n-   For each research question, identify the explanatory variable, the response variable, their types, and the correct statistical test\n\n    -   Think about what the data would look like for each individual!\n\n## Identifying the right test: exercise Q1\n\n![](images/14/test_table.png)\n\n## Identifying the right test: exercise Q1\n\n-   a\\. How does the amount of money a country spends on healthcare (per person) affect its average life expectancy?\n\n::: incremental\n-   Explanatory variable(s) and type(s)?\n\n    -   Amount of money per person a country spends on healthcare. Numeric.\n\n-   Response variable and type?\n\n    -   Average life expectancy. Numeric.\n\n-   Correct statistical test?\n\n    -   Linear regression\n:::\n\n## Identifying the right test: exercise Q2\n\n-   Same thing, new questions. For each one, identify the explanatory variable, the response variable, their types, and the correct statistical test\n\n![](images/14/test_table.png)\n\n## Identifying the right test: exercise Q2b\n\n-   How is a patient's body mass index related to the probability a doctor refers them to a specialist?\n\n::: incremental\n-   Explanatory variable(s) and type(s)?\n\n    -   Body mass index. Numeric.\n\n-   Response variable and type?\n\n    -   Whether or not they are referred to a specialist. Categorical with two categories (yes/no).\n\n-   Correct statistical test?\n\n    -   Logistic regression\n:::\n\n## Identifying the right test: exercise Q2c\n\n-   How do outcomes of traffic stops (which can be warnings, citations, or arrests) vary by the driver's race?\n\n::: incremental\n-   Explanatory variable(s) and type(s)?\n\n    -   Driver's race. Categorical with three or more categories.\n\n-   Response variable and type?\n\n    -   Outcomes of traffic stops. Categorical with three or more categories.\n\n-   Correct statistical test?\n\n    -   Chi-square test of independence\n:::\n\n# We know what test we need! Now what?\n\n## Running a hypothesis test in R with `infer` {.smaller}\n\n::: incremental\n-   The bad news: there are a lot of different tests.\n\n-   The good news: regardless of what specific test you run, the logic is similar, and your code will look about the same!\n\n-   We will be using [the `infer` package](https://infer.tidymodels.org/index.html) to conduct hypothesis tests\n\n    -   `infer` is built to work on similar logic to the tidyverse---where `filter()`, `mutate()`, and `ggplot()` are from\n    -   Its documentation is excellent---check out the website ([link here](https://infer.tidymodels.org/index.html)) if you ever get stuck. It has lots of examples of every kind of test it can run.\n:::\n\n## Steps to running a hypothesis test with `infer`{.smaller}\n\n::: incremental\n1.  Calculate the test statistic of your sample\n2.  Simulate the null distribution\n3.  Calculate the p value of your sample\n4.  Visualize the test statistic of your sample alongside the null distribution\n:::\n\n## Step 1: Calculate the test statistic of your sample {.smaller}\n\n::: incremental\n-   Test statistic: A number that quantifies how much your sample differs from the expected sampling distribution.\n-   For example: Z scores\n-   Different tests use different test statistics\n-   Regardless of what it is specifically, step 1 is to calculate it.\n:::\n\n## Step 1: Calculate the test statistic of your sample\n\n::: incremental\n-   We'll use the `gss` data (a nationally representative survey of American adults).\n\n-   Our question: How does the probability of obtaining a college degree vary by sex assigned at birth?\n\n    -   Explanatory variable: sex assigned at birth (categorical w two categories)\n    -   Response variable: Whether or not someone obtained a college degree (categorical w two categories)\n    -   So we'll use a two sample Z test\n:::\n\n## Step 1: Calculate the test statistic of your sample\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(gss)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 500\nColumns: 11\n$ year    <dbl> 2014, 1994, 1998, 1996, 1994, 1996, 1990, 2016, 2000, 1998, 20…\n$ age     <dbl> 36, 34, 24, 42, 31, 32, 48, 36, 30, 33, 21, 30, 38, 49, 25, 56…\n$ sex     <fct> male, female, male, male, male, female, female, female, female…\n$ college <fct> degree, no degree, degree, no degree, degree, no degree, no de…\n$ partyid <fct> ind, rep, ind, ind, rep, rep, dem, ind, rep, dem, dem, ind, de…\n$ hompop  <dbl> 3, 4, 1, 4, 2, 4, 2, 1, 5, 2, 4, 3, 4, 4, 2, 2, 3, 2, 1, 2, 5,…\n$ hours   <dbl> 50, 31, 40, 40, 40, 53, 32, 20, 40, 40, 23, 52, 38, 72, 48, 40…\n$ income  <ord> $25000 or more, $20000 - 24999, $25000 or more, $25000 or more…\n$ class   <fct> middle class, working class, working class, working class, mid…\n$ finrela <fct> below average, below average, below average, above average, ab…\n$ weight  <dbl> 0.8960034, 1.0825000, 0.5501000, 1.0864000, 1.0825000, 1.08640…\n```\n\n\n:::\n:::\n\n\n## Step 1.1: `specify` what your variables are\n\n-   How does the probability of obtaining a college degree vary by sex assigned at birth?\n-   First, we use `specify()` to tell R what variables we're interested in\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_stat <- gss |>           # remember the pipe operator? It will be useful here!\n  specify(explanatory = sex,\n          response = college,\n          success = \"degree\") # this last \"success\" piece is used for two sample Z tests only.\n                              # it determines how the proportion is calculated (proportion of \n                              # people who have a degree, or proportion of people who don't)\n```\n:::\n\n\n## Step 1.2: `hypothesize` to tell R what your null hypothesis is\n\n-   Then R needs to know what our null hypothesis is. Usually in this class, our null hypotheses will be that two variables are not related.\n-   We tell R this by adding `hypothesize(null = \"independence\")` to our pipeline\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_stat <- gss |> \n  specify(explanatory = sex,\n          response = college,\n          success = \"degree\") |> \n  hypothesize(null = \"independence\")\n```\n:::\n\n\n## Step 1.3: `calculate` the test statistic {.smaller}\n\n-   Then we tell R what test statistic we would like it to calculate for us (thanks R!)\n-   This varies according to your test (and I'll give you a list).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_stat <- gss |> \n  specify(explanatory = sex,\n          response = college,\n          success = \"degree\") |> \n  hypothesize(null = \"independence\") |> \n  calculate(stat = \"z\") # the statistic we want goes into the \"stat\" option\n```\n:::\n\n\n## What did we end up with? {.smaller}\n\n-   A Z score for our sample!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_stat$stat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.09852599\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   Interpretation: Our sample has a Z score of -0.1, meaning that it is .1 standard deviations below the mean of the null distribution. 0.1 standard deviations is a very small difference, so it's looking likely that we will fail to reject the null hypothesis that men and women obtain college degrees at the same rate!\n\n## Step 2: Simulate the null distribution {.smaller}\n\n::: incremental\n-   Now we have a test statistic for our sample. But we need to know what our null distribution looks like in order to turn that into a p value.\n-   Why? The p value is derived from the area in the tails of our null distribution, equal to or past the point where our sample is. So we need both the sample statistic (which we calculated in step 1) and the null distribution in order to find it.\n:::\n\n## Step 2: Simulate the null distribution with `generate()`\n\n-   This code is actually the same as the code we used before to calculate the test statistic, with just one addition!\n\n-   The line with `generate()` is the only new thing here.\n\n-   Instead of calculating a test statistic for our one sample, here `generate()` is doing some computational wizardry to create a null distribution.\n\n    -   Basically, it's simulating pulling a bunch of samples from the population we assume under the null hypothesis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_dist <- gss |> \n  specify(explanatory = sex,             # just like before, we specify variables\n          response = college,\n          success = \"degree\") |> \n  hypothesize(null = \"independence\") |>  # then tell R what our null hypothesis is\n  generate(reps = 1000) |>               # this part is new! We draw samples from the null distribution\n  calculate(stat = \"z\")                  # and then we calculate the test statistics of our draws--just like before\n```\n:::\n\n\n## Step 2: Simulate the null distribution with `generate()`\n\n-   Conceptually: `generate()` is pulling all of those samples that create the null distribution!\n\n![](images/13/clt_n20.png)\n\n## Step 3: Calculate the p value of the sample\n\n-   We use `get_p_value()` for this\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_p_value(null_dist,               # The first argument is our null distribution\n            obs_stat = test_stat,    # Then the test statistic we calculated\n            direction = \"two-sided\") # direction is related to whether the test is one or two tailed\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.992\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   Interpretation: There is a 99.2% chance that under the null hypothesis we would have obtained a sample with at least as big a difference between men's and women's rates of obtaining college degrees as this one\n-   This is way bigger than 5%! We fail to reject the null hypothesis. Men and women in this data set get college degrees at about the same rate.\n\n## Step 4: Visualize where your sample is with respect to your null distribution\n\n-   This isn't strictly necessary---we already have the p value and were able to make a decision about what to do with the null hypothesis---but it's always clarifying to see the picture.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(null_dist) +                    # this plots the null distribution\n  shade_p_value(obs_stat = test_stat,     # and this marks where our sample is\n                direction = \"two-sided\")  # everything more extreme in either direction is shaded red\n```\n\n::: {.cell-output-display}\n![](15-hypothesistests3_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## Steps to running a hypothesis test with `infer`\n\n::: incremental\n1.  Calculate the test statistic of your sample\n\n    -   with `specify()` (telling R what your variables are),\n    -   then `hypothesize()` (telling R what kind of null hypothesis you have),\n    -   then `calculate()` (calculating your test statistic)\n\n2.  Simulate the null distribution\n\n    -   exactly the same code as step 1, but with an added `generate()` step\n    -   here you are simulating pulling a bunch of samples from your null population in order to figure out what the null distribution of sample statistics would look like\n\n3.  Calculate the p value of your sample\n\n    -   with your null distribution, your test statistic, and `get_p_value()`\n\n4.  Visualize the test statistic of your sample alongside the null distribution\n\n    -   with `visualize()` and `shade_p_value()`\n:::\n\n## Exercise Q3: Run your first hypothesis test!\n\n-   How is someone's gender identity related to their probability of being married?\n\n    -   Explanatory variable: gender; categorical with two categories\n    -   Response variable: married; categorical with two categories\n    -   Correct test: A two-sample Z test, just like the example\n\n-   Don't forget to run the setup chunks first: they will install and load `infer` for you\n",
    "supporting": [
      "15-hypothesistests3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}