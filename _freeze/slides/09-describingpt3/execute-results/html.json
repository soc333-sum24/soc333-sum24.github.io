{
  "hash": "79c3627daca7db7344db8c752323dd5a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Describing data: part 3\"\nsubtitle: \"Lecture 9\"\ndate: \"May 30, 2024\"\nformat: revealjs\n---\n\n\n\n\n## Logistics {.smaller}\n\n-   Project component 2: descriptive statistics\n\n    -   I will have feedback to you on your research questions soon (sorry)\n    -   And project component instructions posted this afternoon (also sorry)\n    -   Due Thursday, June 6 11:59pm\n    -   We will save some time to work on it in class Monday or Tuesday--start before then, come with questions!\n\n## A tip for learning:\n\n    -   Try taking notes in a quarto document!\n    -   You can create a new code chunk by typing \"ctrl\" + \"alt\" + \"I\" (on Windows) or \"command\" + \"option\" + \"I\" (on Mac)\n\n## Today\n\n-   Creating new variables\n-   Stringing commands together with pipes (`|>`)\n\n## Creating variables\n\n::: incremental\n-   You may want to create new variables/change the response options of old variables\n\n-   Example:\n\n    -   RQ: How does employment status vary between teenagers (14-18) and adults (18+)?\n:::\n\n## Creating variables {.smaller}\n\n-   How does employment status vary by age category?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(acs12) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 13\n$ income       <int> 60000, 0, NA, 0, 0, 1700, NA, NA, NA, 45000, NA, 8600, 0,…\n$ employment   <fct> not in labor force, not in labor force, NA, not in labor …\n$ hrs_work     <int> 40, NA, NA, NA, NA, 40, NA, NA, NA, 84, NA, 23, NA, NA, N…\n$ race         <fct> white, white, white, white, white, other, white, other, a…\n$ age          <int> 68, 88, 12, 17, 77, 35, 11, 7, 6, 27, 8, 69, 69, 17, 10, …\n$ gender       <fct> female, male, female, male, female, female, male, male, m…\n$ citizen      <fct> yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, ye…\n$ time_to_work <int> NA, NA, NA, NA, NA, 15, NA, NA, NA, 40, NA, 5, NA, NA, NA…\n$ lang         <fct> english, english, english, other, other, other, english, …\n$ married      <fct> no, no, no, no, no, yes, no, no, no, yes, no, no, yes, no…\n$ edu          <fct> college, hs or lower, hs or lower, hs or lower, hs or low…\n$ disability   <fct> no, yes, no, no, yes, yes, no, yes, no, no, no, no, yes, …\n$ birth_qrtr   <fct> jul thru sep, jan thru mar, oct thru dec, oct thru dec, j…\n```\n\n\n:::\n:::\n\n\n::: incremental\n-   We need to take the \"age\" variable and use it to create age categories (making a categorical variable from a numeric variable!)\n:::\n\n## Creating variables {.smaller}\n\n-   We do this with `mutate()` and `case_when()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 ~ \"teen\",\n                                          age >= 18 ~ \"adult\"))\n```\n:::\n\n\n-   notice that this command spans multiple lines--this is totally fine!\n\n    -   Parentheses matter more than lines for determining where a command starts/ends.\n    -   Breaking long commands up between lines can make them more readable and easier to debug!\n    -   RStudio does the helpful indenting for you.\n    -   After commas is a good place to put line breaks\n\n## Creating variables {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(acs12_agecat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 14\n$ income       <int> 60000, 0, NA, 0, 0, 1700, NA, NA, NA, 45000, NA, 8600, 0,…\n$ employment   <fct> not in labor force, not in labor force, NA, not in labor …\n$ hrs_work     <int> 40, NA, NA, NA, NA, 40, NA, NA, NA, 84, NA, 23, NA, NA, N…\n$ race         <fct> white, white, white, white, white, other, white, other, a…\n$ age          <int> 68, 88, 12, 17, 77, 35, 11, 7, 6, 27, 8, 69, 69, 17, 10, …\n$ gender       <fct> female, male, female, male, female, female, male, male, m…\n$ citizen      <fct> yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, ye…\n$ time_to_work <int> NA, NA, NA, NA, NA, 15, NA, NA, NA, 40, NA, 5, NA, NA, NA…\n$ lang         <fct> english, english, english, other, other, other, english, …\n$ married      <fct> no, no, no, no, no, yes, no, no, no, yes, no, no, yes, no…\n$ edu          <fct> college, hs or lower, hs or lower, hs or lower, hs or low…\n$ disability   <fct> no, yes, no, no, yes, yes, no, yes, no, no, no, no, yes, …\n$ birth_qrtr   <fct> jul thru sep, jan thru mar, oct thru dec, oct thru dec, j…\n$ agecat       <chr> \"adult\", \"adult\", \"teen\", \"teen\", \"adult\", \"adult\", \"teen…\n```\n\n\n:::\n:::\n\n\n## Checking your work {.smaller}\n\n::: incremental\n-   You should always find a way to check that your variables got created in the way you expected! Surprises later are not good...\n\n-   `table()` is helpful for categorical variables in particular\n\n    -   sometimes for numeric as well, but it can get overwhelming\n\n-   Or--look at the new data set in the data viewer! Click on its name in the environment tab. You can sort columns by value (like in Excel/Google Sheets).\n:::\n\n## Checking your work {.smaller}\n\n-   Did it work? Table!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(acs12_agecat$agecat, acs12_agecat$age, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n         0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n  adult  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 32 29 32 25 32 19\n  teen  21 14 23 26 21 25 24 24 26 22 27 39 29 29 27 18 20 24  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n  adult 24 21 16 24 25 26 25 12 26 28 21 22 23 25 25 23 28 14 19 27 24 16 33 25\n  teen   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n  adult 39 30 35 28 27 37 34 22 22 17 19 36 28 36 22 29 38 21 23 22 28 17 19 15\n  teen   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94\n  adult 14 11 16  9 18 14  9 17  5  8 10  5  8  5  8  1 12  6  2  1  2 10  5\n  teen   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        <NA>\n  adult    0\n  teen     0\n  <NA>     0\n```\n\n\n:::\n:::\n\n\n## Checking your work {.smaller}\n\n![](images/09/dataviewer.png)\n\n## Functions for creating variables {.smaller}\n\n::: incremental\n-   `mutate()`: creates a new variable and adds it to your data frame\n\n    -   `mutate(dataset, newvarname = value)`\n\n-   `case_when()`: lets you use conditions to tell mutate what the value of the new variable should be based on other variables that are already in your data frame.\n\n    -   `case_when(condition1 ~ value1, condition2 ~ value2, etc)`\n\n-   `case_when()` goes in the `value` slot of `mutate()`\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(dataset, newvarname = case_when(condition1 ~ value1, \n                                       condition2 ~ value2, \n                                       etc))\n```\n:::\n\n:::\n\n## `mutate()` {.smaller}\n\n-   `mutate()` *can* be used on its own---by itself, it creates a new variable where every observation has the same value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_species <- mutate(acs12, species = \"human\")\nglimpse(acs12_species)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 14\n$ income       <int> 60000, 0, NA, 0, 0, 1700, NA, NA, NA, 45000, NA, 8600, 0,…\n$ employment   <fct> not in labor force, not in labor force, NA, not in labor …\n$ hrs_work     <int> 40, NA, NA, NA, NA, 40, NA, NA, NA, 84, NA, 23, NA, NA, N…\n$ race         <fct> white, white, white, white, white, other, white, other, a…\n$ age          <int> 68, 88, 12, 17, 77, 35, 11, 7, 6, 27, 8, 69, 69, 17, 10, …\n$ gender       <fct> female, male, female, male, female, female, male, male, m…\n$ citizen      <fct> yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, yes, ye…\n$ time_to_work <int> NA, NA, NA, NA, NA, 15, NA, NA, NA, 40, NA, 5, NA, NA, NA…\n$ lang         <fct> english, english, english, other, other, other, english, …\n$ married      <fct> no, no, no, no, no, yes, no, no, no, yes, no, no, yes, no…\n$ edu          <fct> college, hs or lower, hs or lower, hs or lower, hs or low…\n$ disability   <fct> no, yes, no, no, yes, yes, no, yes, no, no, no, no, yes, …\n$ birth_qrtr   <fct> jul thru sep, jan thru mar, oct thru dec, oct thru dec, j…\n$ species      <chr> \"human\", \"human\", \"human\", \"human\", \"human\", \"human\", \"hu…\n```\n\n\n:::\n:::\n\n\n::: incremental\n-   but this isn't super useful... the interesting variables are the ones that vary!\n:::\n\n## `mutate()` {.smaller}\n\n-   It can also be used with a single condition to create a binary (TRUE/FALSE) variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_jobs <- mutate(acs12, hasjob = employment == \"employed\")\n\ntable(acs_jobs$employment, acs_jobs$hasjob, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    \n                     FALSE TRUE <NA>\n  not in labor force   656    0    0\n  unemployed           106    0    0\n  employed               0  843    0\n  <NA>                   0    0  395\n```\n\n\n:::\n:::\n\n\n## `case_when()`\n\n::: incremental\n-   `case_when()` gives you more flexibility--can assign any values and create any number of categories\n-   It is designed to work along with `mutate()` (it isn't useful by itself)\n-   Conditions work the same as in `filter()`\n:::\n\n## Adding more conditions/categories {.smaller}\n\n-   Our example from earlier: how does employment vary by age category?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 ~ \"teen\",\n                                          age >= 18 ~ \"adult\"))\n```\n:::\n\n\n::: incremental\n-   Should we really be analyzing 3 year olds alongside 17 year olds? And 83 year olds alongside 35 year olds?\n:::\n\n## Adding more conditions/categories {.smaller}\n\n-   Let's add two more categories: \"child\" (\\<14) and \"retired\" (\\>67)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_4agecat <- mutate(acs12,\n                        agecat = case_when(age < 14 ~ \"child\",\n                                           age < 18 ~ \"teen\",\n                                           age < 67 ~ \"adult\",\n                                           TRUE ~ \"retired\"))\n```\n:::\n\n\n::: incremental\n-   Conditions are evaluated in order--the value an observation gets is the first one that fits\n\n-   Adding a \"TRUE\" at the end catches everybody who's left over\n\n    -   We could have also used the condition `age >= 67` in place of TRUE--same result\n:::\n\n## Grouping multiple categories into one with `|` {.smaller}\n\n-   Similar to `filter()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(acs12, \n       birthseason = case_when(\n         birth_qrtr == \"oct thru dec\" | birth_qrtr == \"jan thru mar\" ~ \"fallwinter\",\n         birth_qrtr == \"apr thru jun\" | birth_qrtr == \"jul thru sep\" ~ \"springsummer\")\n)\n```\n:::\n\n\n## Combining variables with `&` {.smaller}\n\n::: incremental\n-   Sometimes we have two variables that we want to combine into one\n-   Useful when studying intersectional effects!\n-   Use `&` if something has to meet multiple conditions at once--same as `filter()`.\n:::\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nacs_racegender <- mutate(acs12,\n       racegender = case_when(race == \"black\" & gender == \"male\" ~ \"black man\",\n                              race == \"white\" & gender == \"male\" ~ \"white man\",\n                              race == \"black\" & gender == \"female\" ~ \"black woman\",\n                              race == \"white\" & gender == \"female\" ~ \"white woman\",\n                              gender == \"female\" ~ \"other race woman\",\n                              gender == \"male\" ~ \"other race man\"))\n```\n:::\n\n:::\n\n## Combining variables with `&` {.smaller .scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(acs_racegender$race,\n      acs_racegender$racegender,\n      acs_racegender$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, ,  = male\n\n       \n        black man black woman other race man other race woman white man\n  white         0           0              0                0       800\n  black       108           0              0                0         0\n  asian         0           0             45                0         0\n  other         0           0             78                0         0\n       \n        white woman\n  white           0\n  black           0\n  asian           0\n  other           0\n\n, ,  = female\n\n       \n        black man black woman other race man other race woman white man\n  white         0           0              0                0         0\n  black         0          98              0                0         0\n  asian         0           0              0               42         0\n  other         0           0              0               74         0\n       \n        white woman\n  white         755\n  black           0\n  asian           0\n  other           0\n```\n\n\n:::\n:::\n\n\n## Why do this? Brief aside on intersectionality {.smaller}\n\n::: incremental\n-   Intersectionality: people are in many categories that affect their experiences in ways that are complicated! More than the sum of their parts.\n\n    -   Categories like: race, gender, class, ethnicity, education, ability status...\n\n-   Eg: the experience of being an Asian woman is not just the experience of being Asian (all genders) plus the experience of being a woman (all races)\n\n    -   For instance: there are discriminatory stereotypes of Asian women that don't apply to women generally or to Asian people generally--they're unique to Asian women and have unique consequences\n:::\n\n## Intersectionality in analysis\n\n::: incremental\n-   We're still developing good statistical methods\n\n-   But analyzing variables representing combinations of categories instead of single categories in isolation is a good start\n\n    -   eg: analyzing the relationship between health and race-gender combination, rather than health and race and then separately health and gender\n\n-   Not feasible in small samples though :(\n:::\n\n# Common errors with variable creation\n\n## Errors and error messages {.smaller}\n\n::: incremental\n-   R is very picky about syntax (spelling, capitalization, punctuation, symbols and their placement...)\n-   You will make mistakes. But you will get better at fixing them!\n-   Look carefully at format examples (copy/paste is your friend)\n-   Error messages can be cryptic and confusing--you will get better at decoding them\n-   Start looking for your mistake one step behind the place the error message complains about\n:::\n\n## Common errors {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 ~ \"teen\"\n                                          age >= 18 ~ \"adult\"))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:43: unexpected symbol\n2:                        agecat = case_when(age < 18 ~ \"teen\"\n3:                                           age\n                                             ^\n```\n\n\n:::\n:::\n\n\n::: incremental\n-   Watch for missing commas! (especially after copy/pasting)\n:::\n\n## Common errors {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 ~ \"teen\",,\n                                          age >= 18 ~ \"adult\"))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `mutate()`:\nℹ In argument: `agecat = case_when(age < 18 ~ \"teen\", , age >= 18 ~\n  \"adult\")`.\nCaused by error in `list2()`:\n! Argument 2 can't be empty.\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   And extra commas too\n\n## Common errors {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 ~ \"teen\"),\n                                          age >= 18 ~ \"adult\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `mutate()`:\nℹ In argument: `age >= 18 ~ \"adult\"`.\nCaused by error:\n! `age >= 18 ~ \"adult\"` must be a vector, not a <formula> object.\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   Parentheses tell R where each command starts and ends--misplacing them confuses it!\n\n## Common errors {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat <- case_when(age < 18 ~ \"teen\",\n                                           age >= 18 ~ \"adult\"))\n\ntable(acs12_agecat$agecat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n< table of extent 0 >\n```\n\n\n:::\n:::\n\n\n::: fragment\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(acs12_agecat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,000\nColumns: 14\n$ income                                                        <int> 60000, 0…\n$ employment                                                    <fct> not in l…\n$ hrs_work                                                      <int> 40, NA, …\n$ race                                                          <fct> white, w…\n$ age                                                           <int> 68, 88, …\n$ gender                                                        <fct> female, …\n$ citizen                                                       <fct> yes, yes…\n$ time_to_work                                                  <int> NA, NA, …\n$ lang                                                          <fct> english,…\n$ married                                                       <fct> no, no, …\n$ edu                                                           <fct> college,…\n$ disability                                                    <fct> no, yes,…\n$ birth_qrtr                                                    <fct> jul thru…\n$ `agecat <- case_when(age < 18 ~ \"teen\", age >= 18 ~ \"adult\")` <chr> \"adult\",…\n```\n\n\n:::\n:::\n\n:::\n\n## Common errors {.smaller}\n\nInside mutate, use `=`, not `<-` (yes, it is pretty arbitrary)\n\n## Common errors {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 = \"teen\",\n                                          age >= 18 = \"adult\"))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:52: unexpected '='\n1: acs12_agecat <- mutate(acs12, \n2:                        agecat = case_when(age < 18 =\n                                                      ^\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   And inside `case_when()`, use `~`, not `=` (yes, that's pretty arbitrary too)\n\n## Common errors {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacs12_agecat <- mutate(acs12, \n                       agecat = case_when(age < 18 ~ \"teen\",\n                                          age > 18 ~ \"adult\"))\n\ntable(acs12_agecat$agecat, acs12$age, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n         0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n  adult  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 29 32 25 32 19\n  teen  21 14 23 26 21 25 24 24 26 22 27 39 29 29 27 18 20 24  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0 32  0  0  0  0  0\n       \n        24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n  adult 24 21 16 24 25 26 25 12 26 28 21 22 23 25 25 23 28 14 19 27 24 16 33 25\n  teen   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n  adult 39 30 35 28 27 37 34 22 22 17 19 36 28 36 22 29 38 21 23 22 28 17 19 15\n  teen   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94\n  adult 14 11 16  9 18 14  9 17  5  8 10  5  8  5  8  1 12  6  2  1  2 10  5\n  teen   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n  <NA>   0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n       \n        <NA>\n  adult    0\n  teen     0\n  <NA>     0\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   Make sure your conditions catch everyone! This is a benefit of using a catchall `TRUE` condition at the end.\n\n## Exercise: Creating new variables\n\n-   Clone and open the project repo now (**ex-5-30-yourusername**)\n\n-   Then open the .qmd file and try out some variable creation\n\n    -   [Instructions: Computing -\\> Cloning and committing](https://soc333-sum24.github.io/computing-clonerepo.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}