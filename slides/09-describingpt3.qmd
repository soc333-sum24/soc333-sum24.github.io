---
title: "Describing data: part 3"
subtitle: "Lecture 9"
date: "May 30, 2024"
format: revealjs
---

```{r, include = FALSE}
library(tidyverse)
library(openintro)
sports <- readRDS("data/sports_teams.rds")
```

## Logistics {.smaller}

-   Project component 2: descriptive statistics

    -   I will have feedback to you on your research questions soon (sorry)
    -   And project component instructions posted this afternoon (also sorry)
    -   Due Thursday, June 6 11:59pm
    -   We will save some time to work on it in class Monday or Tuesday--start before then, come with questions!

## A tip for learning:

    -   Try taking notes in a quarto document!
    -   You can create a new code chunk by typing "ctrl" + "alt" + "I" (on Windows) or "command" + "option" + "I" (on Mac)

## Today

-   Creating new variables
-   Stringing commands together with pipes (`|>`)

## Creating variables

::: incremental
-   You may want to create new variables/change the response options of old variables

-   Example:

    -   RQ: How does employment status vary between teenagers (14-18) and adults (18+)?
:::

## Creating variables {.smaller}

-   How does employment status vary by age category?

```{r}
glimpse(acs12) 
```

::: incremental
-   We need to take the "age" variable and use it to create age categories (making a categorical variable from a numeric variable!)
:::

## Creating variables {.smaller}

-   We do this with `mutate()` and `case_when()`

```{r}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 ~ "teen",
                                          age >= 18 ~ "adult"))
```

-   notice that this command spans multiple lines--this is totally fine!

    -   Parentheses matter more than lines for determining where a command starts/ends.
    -   Breaking long commands up between lines can make them more readable and easier to debug!
    -   RStudio does the helpful indenting for you.
    -   After commas is a good place to put line breaks

## Creating variables {.smaller}

```{r}
glimpse(acs12_agecat)
```

## Checking your work {.smaller}

::: incremental
-   You should always find a way to check that your variables got created in the way you expected! Surprises later are not good...

-   `table()` is helpful for categorical variables in particular

    -   sometimes for numeric as well, but it can get overwhelming

-   Or--look at the new data set in the data viewer! Click on its name in the environment tab. You can sort columns by value (like in Excel/Google Sheets).
:::

## Checking your work {.smaller}

-   Did it work? Table!

```{r}
table(acs12_agecat$agecat, acs12_agecat$age, useNA = "always")
```

## Checking your work {.smaller}

![](images/09/dataviewer.png)

## Functions for creating variables {.smaller}

::: incremental
-   `mutate()`: creates a new variable and adds it to your data frame

    -   `mutate(dataset, newvarname = value)`

-   `case_when()`: lets you use conditions to tell mutate what the value of the new variable should be based on other variables that are already in your data frame.

    -   `case_when(condition1 ~ value1, condition2 ~ value2, etc)`

-   `case_when()` goes in the `value` slot of `mutate()`
:::

::: fragment
```{r, eval = FALSE}
mutate(dataset, newvarname = case_when(condition1 ~ value1, 
                                       condition2 ~ value2, 
                                       etc))
```
:::

## `mutate()` {.smaller}

-   `mutate()` *can* be used on its own---by itself, it creates a new variable where every observation has the same value

```{r}
acs12_species <- mutate(acs12, species = "human")
glimpse(acs12_species)
```

::: incremental
-   but this isn't super useful... the interesting variables are the ones that vary!
:::

## `mutate()` {.smaller}

-   It can also be used with a single condition to create a binary (TRUE/FALSE) variable

```{r}
acs_jobs <- mutate(acs12, hasjob = employment == "employed")

table(acs_jobs$employment, acs_jobs$hasjob, useNA = "always")
```

## `case_when()`

::: incremental
-   `case_when()` gives you more flexibility--can assign any values and create any number of categories
-   It is designed to work along with `mutate()` (it isn't useful by itself)
-   Conditions work the same as in `filter()`
:::

## Adding more conditions/categories {.smaller}

-   Our example from earlier: how does employment vary by age category?

```{r eval = FALSE}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 ~ "teen",
                                          age >= 18 ~ "adult"))
```

::: incremental
-   Should we really be analyzing 3 year olds alongside 17 year olds? And 83 year olds alongside 35 year olds?
:::

## Adding more conditions/categories {.smaller}

-   Let's add two more categories: "child" (\<14) and "retired" (\>67)

```{r, eval = FALSE}
acs12_4agecat <- mutate(acs12,
                        agecat = case_when(age < 14 ~ "child",
                                           age < 18 ~ "teen",
                                           age < 67 ~ "adult",
                                           TRUE ~ "retired"))
```

::: incremental
-   Conditions are evaluated in order--the value an observation gets is the first one that fits

-   Adding a "TRUE" at the end catches everybody who's left over

    -   We could have also used the condition `age >= 67` in place of TRUE--same result
:::

## Grouping multiple categories into one with `|` {.smaller}

-   Similar to `filter()`

```{r, eval = FALSE}
mutate(acs12, 
       birthseason = case_when(
         birth_qrtr == "oct thru dec" | birth_qrtr == "jan thru mar" ~ "fallwinter",
         birth_qrtr == "apr thru jun" | birth_qrtr == "jul thru sep" ~ "springsummer")
)
```

## Combining variables with `&` {.smaller}

::: incremental
-   Sometimes we have two variables that we want to combine into one
-   Useful when studying intersectional effects!
-   Use `&` if something has to meet multiple conditions at once--same as `filter()`.
:::

::: fragment
```{r}
acs_racegender <- mutate(acs12,
       racegender = case_when(race == "black" & gender == "male" ~ "black man",
                              race == "white" & gender == "male" ~ "white man",
                              race == "black" & gender == "female" ~ "black woman",
                              race == "white" & gender == "female" ~ "white woman",
                              gender == "female" ~ "other race woman",
                              gender == "male" ~ "other race man"))
```
:::

## Combining variables with `&` {.smaller .scrollable}

```{r}
table(acs_racegender$race,
      acs_racegender$racegender,
      acs_racegender$gender)
```

## Why do this? Brief aside on intersectionality {.smaller}

::: incremental
-   Intersectionality: people are in many categories that affect their experiences in ways that are complicated! More than the sum of their parts.

    -   Categories like: race, gender, class, ethnicity, education, ability status...

-   Eg: the experience of being an Asian woman is not just the experience of being Asian (all genders) plus the experience of being a woman (all races)

    -   For instance: there are discriminatory stereotypes of Asian women that don't apply to women generally or to Asian people generally--they're unique to Asian women and have unique consequences
:::

## Intersectionality in analysis

::: incremental
-   We're still developing good statistical methods

-   But analyzing variables representing combinations of categories instead of single categories in isolation is a good start

    -   eg: analyzing the relationship between health and race-gender combination, rather than health and race and then separately health and gender

-   Not feasible in small samples though :(
:::

# Common errors with variable creation

## Errors and error messages {.smaller}

::: incremental
-   R is very picky about syntax (spelling, capitalization, punctuation, symbols and their placement...)
-   You will make mistakes. But you will get better at fixing them!
-   Look carefully at format examples (copy/paste is your friend)
-   Error messages can be cryptic and confusing--you will get better at decoding them
-   Start looking for your mistake one step behind the place the error message complains about
:::

## Common errors {.smaller}

```{r, error = TRUE}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 ~ "teen"
                                          age >= 18 ~ "adult"))
```

::: incremental
-   Watch for missing commas! (especially after copy/pasting)
:::

## Common errors {.smaller}

```{r, error = TRUE}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 ~ "teen",,
                                          age >= 18 ~ "adult"))
```

. . .

-   And extra commas too

## Common errors {.smaller}

```{r, error = TRUE}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 ~ "teen"),
                                          age >= 18 ~ "adult")
```

. . .

-   Parentheses tell R where each command starts and ends--misplacing them confuses it!

## Common errors {.smaller}

```{r, error = TRUE}
acs12_agecat <- mutate(acs12, 
                       agecat <- case_when(age < 18 ~ "teen",
                                           age >= 18 ~ "adult"))

table(acs12_agecat$agecat)
```

::: fragment
```{r}
glimpse(acs12_agecat)
```
:::

## Common errors {.smaller}

Inside mutate, use `=`, not `<-` (yes, it is pretty arbitrary)

## Common errors {.smaller}

```{r, error = TRUE}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 = "teen",
                                          age >= 18 = "adult"))
```

. . .

-   And inside `case_when()`, use `~`, not `=` (yes, that's pretty arbitrary too)

## Common errors {.smaller}

```{r, error = TRUE}
acs12_agecat <- mutate(acs12, 
                       agecat = case_when(age < 18 ~ "teen",
                                          age > 18 ~ "adult"))

table(acs12_agecat$agecat, acs12$age, useNA = "always")
```

. . .

-   Make sure your conditions catch everyone! This is a benefit of using a catchall `TRUE` condition at the end.

## Exercise: Creating new variables

-   Clone and open the project repo now (**ex-5-30-yourusername**)

-   Then open the .qmd file and try out some variable creation

    -   [Instructions: Computing -\> Cloning and committing](https://soc333-sum24.github.io/computing-clonerepo.html)
